"""Rename password to hashed_password in monitored_databases

Revision ID: 3e15e9bbd784
Revises: a4729d6e1dbe
Create Date: 2025-05-04 12:15:34.417366

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3e15e9bbd784'
down_revision: Union[str, None] = 'a4729d6e1dbe'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove drop operations for tables other than monitored_databases
    # op.drop_index('ix_snapshots_database_id', table_name='snapshots')
    # op.drop_index('ix_snapshots_id', table_name='snapshots')
    # op.drop_table('snapshots')
    # op.drop_index('ix_db_objects_id', table_name='db_objects')
    # op.drop_index('ix_db_objects_snapshot_id', table_name='db_objects')
    # op.drop_table('db_objects')
    # op.drop_index('ix_locks_id', table_name='locks')
    # op.drop_index('ix_locks_pid', table_name='locks')
    # op.drop_index('ix_locks_snapshot_id', table_name='locks')
    # op.drop_table('locks')
    # op.drop_index('ix_statement_stats_id', table_name='statement_stats')
    # op.drop_index('ix_statement_stats_queryid', table_name='statement_stats')
    # op.drop_index('ix_statement_stats_snapshot_id', table_name='statement_stats')
    # op.drop_table('statement_stats')
    # op.drop_index('ix_session_activity_id', table_name='session_activity')
    # op.drop_index('ix_session_activity_pid', table_name='session_activity')
    # op.drop_index('ix_session_activity_snapshot_id', table_name='session_activity')
    # op.drop_table('session_activity')
    
    # Keep operations for monitored_databases
    op.add_column('monitored_databases', sa.Column('hashed_password', sa.String(), nullable=False))
    op.drop_column('monitored_databases', 'password')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Keep operations for monitored_databases
    op.add_column('monitored_databases', sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('monitored_databases', 'hashed_password')
    
    # Remove create operations for tables other than monitored_databases
    # op.create_table('session_activity',
    # sa.Column('snapshot_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('datid', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('datname', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('pid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('usesysid', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('usename', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('application_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('client_addr', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('client_hostname', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('client_port', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('backend_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    # sa.Column('xact_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    # sa.Column('query_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    # sa.Column('state_change', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    # sa.Column('wait_event_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('wait_event', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('backend_xid', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('backend_xmin', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('query_id', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('query', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('backend_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['snapshot_id'], ['snapshots.id'], name='session_activity_snapshot_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='session_activity_pkey')
    # )
    # op.create_index('ix_session_activity_snapshot_id', 'session_activity', ['snapshot_id'], unique=False)
    # op.create_index('ix_session_activity_pid', 'session_activity', ['pid'], unique=False)
    # op.create_index('ix_session_activity_id', 'session_activity', ['id'], unique=False)
    # op.create_table('statement_stats',
    # sa.Column('snapshot_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('userid', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('dbid', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('queryid', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('query', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('calls', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('total_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('min_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('max_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('mean_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('stddev_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('rows', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('shared_blks_hit', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('shared_blks_read', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('shared_blks_dirtied', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('shared_blks_written', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('local_blks_hit', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('local_blks_read', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('local_blks_dirtied', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('local_blks_written', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('temp_blks_read', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('temp_blks_written', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('blk_read_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('blk_write_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['snapshot_id'], ['snapshots.id'], name='statement_stats_snapshot_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='statement_stats_pkey')
    # )
    # op.create_index('ix_statement_stats_snapshot_id', 'statement_stats', ['snapshot_id'], unique=False)
    # op.create_index('ix_statement_stats_queryid', 'statement_stats', ['queryid'], unique=False)
    # op.create_index('ix_statement_stats_id', 'statement_stats', ['id'], unique=False)
    # op.create_table('locks',
    # sa.Column('snapshot_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('locktype', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('database', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('relation', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('page', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('tuple', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('virtualxid', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('transactionid', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('classid', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('objid', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('objsubid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('virtualtransaction', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('pid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('mode', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('granted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('fastpath', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('waitstart', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['snapshot_id'], ['snapshots.id'], name='locks_snapshot_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='locks_pkey')
    # )
    # op.create_index('ix_locks_snapshot_id', 'locks', ['snapshot_id'], unique=False)
    # op.create_index('ix_locks_pid', 'locks', ['pid'], unique=False)
    # op.create_index('ix_locks_id', 'locks', ['id'], unique=False)
    # op.create_table('db_objects',
    # sa.Column('snapshot_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('object_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('schema_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('object_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('total_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('table_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('index_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('toast_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['snapshot_id'], ['snapshots.id'], name='db_objects_snapshot_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='db_objects_pkey')
    # )
    # op.create_index('ix_db_objects_snapshot_id', 'db_objects', ['snapshot_id'], unique=False)
    # op.create_index('ix_db_objects_id', 'db_objects', ['id'], unique=False)
    # op.create_table('snapshots',
    # sa.Column('database_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('snapshot_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['database_id'], ['monitored_databases.id'], name='snapshots_database_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='snapshots_pkey')
    # )
    # op.create_index('ix_snapshots_id', 'snapshots', ['id'], unique=False)
    # op.create_index('ix_snapshots_database_id', 'snapshots', ['database_id'], unique=False)
    # ### end Alembic commands ###
